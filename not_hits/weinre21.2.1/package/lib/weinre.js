// Generated by CoffeeScript 1.8.0
var HttpChannelHandler, Version, channelManager, checkForDeath, deathTimeout, express, fs, getStaticWebDir, jsonBodyParser, path, processOptions, run2, serviceManager, startDeathWatcher, startServer, utils;

fs = require('fs');
path = require('path');
express = require('express');
utils = require('./utils');
jsonBodyParser = require('./jsonBodyParser');
HttpChannelHandler = require('./HttpChannelHandler');
channelManager = require('./channelManager');

serviceManager = require('./serviceManager');
var favicon = require('serve-favicon');
var errorHandler = require('errorhandler');

var MAX_AGE = 1000 * 60 * 5;

exports.run = function(options) {
  processOptions(options);
  return run2();
};

run2 = function() {
  var options;
  options = utils.options;
  serviceManager.registerProxyClass('WeinreClientEvents');
  serviceManager.registerProxyClass('WeinreTargetEvents');
  serviceManager.registerLocalClass('WeinreClientCommands');
  serviceManager.registerLocalClass('WeinreTargetCommands');
  startDeathWatcher(options.deathTimeout);
  return startServer();
};

processOptions = function(options) {
  if (options.debug) {
    options.verbose = true;
  }
  options.staticWebDir = getStaticWebDir();
  utils.setOptions(options);
  return options;
};


deathTimeout = null;

startDeathWatcher = function(timeout) {
  deathTimeout = utils.options.deathTimeout * 1000;
  return setInterval(checkForDeath, 1000);
};

checkForDeath = function() {
  var channel, now, _i, _len, _ref, _results;
  now = (new Date).valueOf();
  _ref = channelManager.getChannels();
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    channel = _ref[_i];
    if (now - channel.lastRead > deathTimeout) {
      _results.push(channel.close());
    } else {
      _results.push(void 0);
    }
  }
  return _results;
};

startServer = function() {
  var app, clientHandler, options, targetHandler;
  options = utils.options;
  clientHandler = new HttpChannelHandler('/ws/client');
  targetHandler = new HttpChannelHandler('/ws/target');
  channelManager.initialize();
  app = express();
  app.use(favicon(options.staticWebDir + '/images/weinre-icon-32x32.png'));
  app.use(jsonBodyParser());
  app.all(/^\/ws\/client(.*)/, function(request, response, next) {
    var uri;
    uri = request.params[0];
    if (uri === '') {
      uri = '/';
    }
    return clientHandler.handle(request, response, uri);
  });
  app.all(/^\/ws\/target(.*)/, function(request, response, next) {
    var uri;
    uri = request.params[0];
    if (uri === '') {
      uri = '/';
    }
    return targetHandler.handle(request, response, uri);
  });
  app.use(errorHandler({
    dumpExceptions: true
  }));
  app.use(express.static(options.staticWebDir, { maxAge: MAX_AGE }));
  if (options.server) {
    options.server.on('request', app);
  } else if (options.httpPort) {
    if (options.boundHost === '-all-') {
      app.listen(options.httpPort);
    } else {
      app.listen(options.httpPort, options.boundHost);
    }
  }
  return app;
};

getStaticWebDir = function() {
  var webDir;
  webDir = path.normalize(path.join(__dirname, '../web'));
  if (utils.fileExistsSync(webDir)) {
    return webDir;
  }
  return utils.exit('unable to find static files to serve in #{webDir}; did you do a build?');
};

Version = null;

exports.getVersion = function() {
  var json, packageJsonName, values;
  if (Version) {
    return Version;
  }
  packageJsonName = path.join(path.dirname(fs.realpathSync(__filename)), '../package.json');
  json = fs.readFileSync(packageJsonName, 'utf8');
  values = JSON.parse(json);
  Version = values.version;
  return Version;
};
